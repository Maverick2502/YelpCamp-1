require('dotenv').config();

const express = require('express'),
    session = require('express-session'),
    flash = require('connect-flash'), 
    ejsMate = require('ejs-mate'),
    methodOverride = require('method-override'),
    mongoose = require('mongoose'),
    path = require('path'),
    passport = require('passport'),
    localStrategy = require('passport-local'),
    ExpressError = require('./utils/ExpressError'),
    app = express(),
    campgroundRoutes = require('./routes/campgrounds'),
    reviewRoutes = require('./routes/reviews'),
    userRoutes = require('./routes/users');    
    User = require('./models/user');

// Code connecting to mongodb
mongoose.connect('mongodb://localhost:27017/yelpcamp', 
{
    useNewUrlParser: true, 
    useUnifiedTopology: true,
    useCreateIndex: true,
    useFindAndModify: false
})
.then(() => {
        console.log('Connection open!')
})
.catch(err => {
        console.log('Error in connecting...')
        console.log(err)
});     

// EJS & path setup
app.engine('ejs', ejsMate);
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views')); // Set default path for views to '/views'

// Middleware
app.use(express.urlencoded({extended: true}));
app.use(methodOverride('_method')); // Enable method overriding for PUT and DELETE requests
app.use(express.static(path.join(__dirname, 'public'))); // Prep static assets at public

const sessionConfig = {
    secret: 'replacewithbettersecret',
    resave: false,
    saveUninitialized: true,
    cookie: {
        httpOnly: true, // For security measures
        expires: Date.now() * 1000 * 60 * 60 * 24 * 7, // Set cookie to expire in a week (time is in ms)
        maxAge: 1000 * 60 * 60 * 24 * 7,
    },
} // Options for session setup
app.use(session(sessionConfig));
app.use(flash());

app.use(passport.initialize());
app.use(passport.session()); // Enables persistent login sessions
passport.use(new localStrategy(User.authenticate())); // Local strategy method is to use authenticate() method from User
// authenticate() is already generated by passportLocalMongoose plugin
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());
// serializeUser() and deserializeUser() are already added by passportLocalMongoose to User

// Flash middleware
app.use((req, res, next) => {
    res.locals.currentUser = req.user;
    res.locals.success = req.flash('success');
    res.locals.error = req.flash('error');
    next();
})

// Routes
app.get('/', (req, res) => {
    res.render('index');
});

app.use('/campgrounds', campgroundRoutes);
app.use('/campgrounds/:id/reviews', reviewRoutes);
app.use('/', userRoutes);

// 404 page
app.all('*', (req, res, next) => {
    next(new ExpressError('Page Not Found', 404))
})

// Default error handler
app.use((err, req, res, next) => {
    const { statusCode = 500 } = err;
    if (!err.message) err.message = 'Oh No, Something Went Wrong!'
    res.status(statusCode).render('error', { err });
 })

app.listen(3000, () => (console.log('Server listening on port 3000')));